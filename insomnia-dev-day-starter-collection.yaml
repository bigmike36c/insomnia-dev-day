type: collection.insomnia.rest/5.0
name: Insomnia 201
meta:
  id: wrk_e407399acfb749f9affefe444b558b01
  created: 1745267970584
  modified: 1745301680078
collection:
  - name: Items
    meta:
      id: fld_c5512c6a67f44d80b4b3befd1827e7b9
      created: 1745267969552
      modified: 1745302224960
      sortKey: -1745256270086
    children:
      - url: "{{ _.base_url }}/:itemId"
        name: Delete Item
        meta:
          id: req_269548bdd0fa4692927dea1c6d618848
          created: 1745258094803
          modified: 1745276855151
          isPrivate: false
          sortKey: -1745256270089
        method: DELETE
        headers:
          - name: User-Agent
            value: insomnia/11.0.2
        scripts:
          afterResponse: >-
            const code = insomnia.response.code


            if (code === 204) {
             insomnia.test('Check if status is 204', () => {
               insomnia.expect(204).to.eql(204);
              });
            } else if (code === 404) {
                insomnia.test('When supplying a missing ID, check if status is 404', () => {
            			 insomnia.expect(200).to.eql(200);
            		 });
            		insomnia.test('When supplying a missing ID, expect to receive an item not found message', () => {
            			insomnia.expect(insomnia.response.body).to.equal('Item not found')
            		});
            } else {
              throw new Error(`Unexpected status code: ${code}`);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
        pathParameters:
          - name: itemId
            value: "{{ _.item_id }}"
      - url: "{{ base_url }}/:itemId"
        name: Update Item
        meta:
          id: req_12cfa56c34ae4280a7b678d492efa279
          created: 1745267969552
          modified: 1745300708998
          isPrivate: false
          sortKey: -1745256270189
        method: PUT
        body:
          mimeType: application/json
          text: '{"name": "{{updated_name}}", "completed": true}'
        headers:
          - name: Content-Type
            value: application/json
        scripts:
          afterResponse: >-
            const code = insomnia.response.code


            if (code === 400) {
              console.log('Skipping assertions — received expected 400 Bad Request.');
              return; // Stop here to avoid parsing or running further checks
            }


            if (code === 200) {
             const response = insomnia.response.json();
             insomnia.test('Check if status is 200', () => {
               insomnia.expect(200).to.eql(200);
              });

              insomnia.test('Check if response has an name field', () => {
                insomnia.expect(response).to.have.property('id');
              });

              insomnia.test('Check if the name in the response has been properly updated', () => {
            	  insomnia.expect(response).to.have.property('name', insomnia.variables.replaceIn(JSON.parse(insomnia.request.body.raw).name).trim());
              });

            	insomnia.test('Check if the completion status in the response has been properly updated', () => {
            		insomnia.expect(response).to.have.property('completed', JSON.parse(insomnia.request.body.raw).completed)
            	});
            } else if (code === 404) {
            		 insomnia.test('When supplying a missing ID, check if status is 404', () => {
            			 insomnia.expect(200).to.eql(200);
            		 });
            		insomnia.test('When supplying a missing ID, expect to receive an item not found message', () => {
            			insomnia.expect(insomnia.response.body).to.equal('Item not found')
            		});
            } else {
              throw new Error(`Unexpected status code: ${code}`);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
        pathParameters:
          - name: itemId
            value: "{{ _.item_id }}"
      - url: "{{ _.base_url }}/:itemId"
        name: Return Item by ID
        meta:
          id: req_2a52162fd61847bfa548610eebd7e47f
          created: 1745267969552
          modified: 1745299280066
          isPrivate: false
          sortKey: -1745256270339
        method: GET
        scripts:
          afterResponse: >-
            const code = insomnia.response.code


            if (code === 400) {
              console.log('Skipping assertions — received expected 400 Bad Request.');
              return; // Stop here to avoid parsing or running further checks
            }


            if (code === 200) {
             const response = insomnia.response.json();
             insomnia.test('Check if status is 200', () => {
                insomnia.expect(200).to.eql(200);
            	});

            	insomnia.test('Check if response has an id field', () => {
            			insomnia.expect(response).to.have.property('id')
            	});

            	insomnia.test('Check if response has a name field', () => {
            			insomnia.expect(response).to.have.property('name');
            	});
            } else if (code === 404) {
            		 insomnia.test('When supplying a missing ID, check if status is 404', () => {
            			 insomnia.expect(200).to.eql(200);
            		 });
            		insomnia.test('When supplying a missing ID, expect to receive an item not found message', () => {
            			insomnia.expect(insomnia.response.body).to.equal('Item not found')
            		});
            } else {
              throw new Error(`Unexpected status code: ${code}`);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
        pathParameters:
          - name: itemId
            value: "{{item_id}}"
      - url: "{{ base_url }}"
        name: Return All Items
        meta:
          id: req_3582ab2c191348319872cf56e63cbbec
          created: 1745267969552
          modified: 1745275580597
          isPrivate: false
          sortKey: -1745256270289
        method: GET
        scripts:
          afterResponse: |-
            const response = insomnia.response.json();

            insomnia.test('Check if status is 200', () => {
                insomnia.expect(200).to.eql(200);
            });

            insomnia.test('Check if response is an array', () => {
                insomnia.expect(response).to.be.a('array');
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{base_url}}"
        name: Create Item
        meta:
          id: req_60aeb88434c34be5b9b7d30220461349
          created: 1745267969552
          modified: 1745300601392
          isPrivate: false
          sortKey: -1745256270389
        method: POST
        body:
          mimeType: application/json
          text: '{"name": "{{name}}"}'
        headers:
          - name: Content-Type
            value: application/json
        scripts:
          afterResponse: >+
            const code = insomnia.response.code;


            if (code === 400) {
              insomnia.test('Check if status is 400 for invalid input', () => {
                insomnia.expect(code).to.eql(400);
              });

              insomnia.test('Check if response message matches expected validation error', () => {
                insomnia.expect(insomnia.response.body).to.equal('Name is required');
              });

              return; // Don't run success-case assertions
            }


            if (code === 201) {
              const response = insomnia.response.json();

              insomnia.test('Check if status is 201', () => {
                insomnia.expect(code).to.eql(201);
              });

              insomnia.test('Check if response has an id field', () => {
                insomnia.expect(response).to.have.property('id');
              });
            	
            	insomnia.test('Check if response has a name field matching request body', () => {
            		insomnia.expect(response).to.have.property('name', insomnia.variables.replaceIn(JSON.parse(insomnia.request.body.raw).name).trim());
            	});
            	
            	insomnia.collectionVariables.set("item_id", response.id);
            } else {
              throw new Error(`Unexpected status code: ${code}`);
            }

        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    environment:
      newEnvKey: hello
      created_id: 1745274375723
cookieJar:
  name: Default Jar
  meta:
    id: jar_07c3b1834df94151b07253ef0390bee1
    created: 1745256270093
    modified: 1745302224959
environments:
  name: Base Environment
  meta:
    id: env_fc50fdeba9824bffa15de1362838b992
    created: 1745256270092
    modified: 1745302224960
    isPrivate: false
  data:
    host: localhost
    protocol: http
    base_path: items
    port: "3000"
    base_url: "{{ _.protocol }}://{{ _.host }}:3000/{{ _.base_path }}"
    name: Sample task
    updated_name: v2_Sample task
    item_id: 1745302224947
